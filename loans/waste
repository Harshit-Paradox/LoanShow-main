# def handleSignup(request):
#     if request.method =='POST' :
#         username = request.POST['username']
#         fname = request.POST['fname']
#         lname = request.POST['lname']
#         email= request.POST['email']
#         pass1= request.POST['pass1']
#         pass2= request.POST['pass2']

#         if (len(username)>10):
#             messages.success(request, "Your Username is not Valid")
#             return redirect('index')
        
#         if not username.isalnum():
#             messages.success(request, "Your Username is not Valid")
#             return redirect('index')
        
#         if pass1!=pass2:
#             messages.success(request, "Your password doesnot match")
#             return redirect('index')

#         myuser = User.objects.create_user(username, email, pass1)
#         myuser.first_name= fname
#         myuser.last_name= lname
#         myuser.save()

        
#         profile = Profile(user=myuser)
#         profile.save()

#         messages.success(request, "Your Account is Created")
#         return redirect('index')
#     else:
#         return HttpResponse('404-Notfound')





#???????????????????????????????????????????????????????????????????????????????????????????????????????????

# from django.shortcuts import redirect , HttpResponse ,render
# from rest_framework import generics
# from django.contrib.auth.models import User
# from django.contrib.auth import authenticate, login, logout
# from django.contrib import messages 
# from .models import Loan , HomeLoanData
# from .serializers import LoanSerializer , HomeLoanDataSerializer 
# from .models import Profile
# import random
# from .helper import MessageHandler

# def index(request):
#     return render(request, 'index.html')


# def handleSignup(request):
#     if request.method=="POST":
#         if User.objects.filter(username__iexact=request.POST['user_name']).exists():
#             return HttpResponse("User already exists")

#         user=User.objects.create_user(username=request.POST['user_name'],password=request.POST['password'],email=request.POST['email'])
#         user.save()
#         otp=random.randint(1000,9999)
#         phone_number=request.POST.get('phone_number')
#         # email=request.POST.get('email')
#         # pass1 =User.objects.create(password=request.POST['password'])
#         profile=Profile.objects.create(user=user,phone_number=phone_number,otp=f'{otp}',email=email)
#         messagehandler=MessageHandler(request.POST['phone_number'],otp).send_otp_via_message()
#         red=redirect(f'otp/{profile.uid}/')
#         red.set_cookie("can_otp_enter",True,max_age=600)
#         return red  
#     return render(request, 'index.html')
    


# def otpVerify(request,uid):
#     if request.method=="POST":
#         profile=Profile.objects.get(uid=uid)     
#         if request.COOKIES.get('can_otp_enter')!=None:
#             if(profile.otp==request.POST['otp']):
#                 messages.success(request, "Your Account is Created")
#                 red=redirect("home")
#                 red.set_cookie('verified',True)
#                 return red
#             return HttpResponse("wrong otp")
#         return HttpResponse("10 minutes passed")        
#     return render(request,"otp.html",{'id':uid})


# def home(request):
#     if request.COOKIES.get('verified') and request.COOKIES.get('verified')!=None:
#         return render(request, 'index.html')
#     else:
#         return HttpResponse(" Not verified.")
        



# def handleLogin(request):
#     if request.method == 'POST':
#         user_name = request.POST.get('user_name')
#         password = request.POST.get('loginpassword')

#         # Find the user profile based on the provided username
#         try:
#             profile = Profile.objects.get(user__username=user_name)
#         except Profile.DoesNotExist:
#             messages.error(request, "Username not found")
#             return redirect('index')

#         # Authenticate using the User model
#         user = authenticate(request, username=user_name, password=password)

#         if user is not None:
#             login(request, user)
#             messages.success(request, "Your Account is Logged in")
#             return redirect('index')
#         else:
#             messages.error(request, "Wrong details")
#             print(user_name)
#             print(password)
#             return redirect('index')

#     return HttpResponse("Not found")




# def handleLogout(request):
#     logout(request)
#     messages.success(request, "Your Account is Logged Out")
#     return redirect('index')




# class LoanListView(generics.ListAPIView):
#     queryset = Loan.objects.all()
#     print(queryset)
#     serializer_class = LoanSerializer
#     # pagination_class = None  # You can set a custom pagination class if needed



# class HomeLoanDataListView(generics.ListAPIView):
#     queryset = HomeLoanData.objects.all()
#     serializer_class = HomeLoanDataSerializer